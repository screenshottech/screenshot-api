openapi: 3.0.3
info:
  title: Screenshot API
  description: |
    API for capturing and managing website screenshots with comprehensive user management and analytics.
    
    ## Authentication
    The API supports multiple authentication methods:
    - **API Key**: Include `X-API-Key` in the header for programmatic access
    - **API Key ID**: Include `X-API-Key-ID` in the header with JWT for secure access
    - **JWT**: Include `Authorization: Bearer <token>` for user-authenticated endpoints
    
    ## Rate Limiting
    - Free plan: 300 requests/month
    - Starter plan: 1000 requests/month
    - Pro plan: 10000 requests/month
    
    ## Supported Formats
    - PNG (lossless)
    - JPEG (compressed)
    - WEBP (modern, smaller size)
    - PDF (document format)
  version: 1.0.0
  contact:
    name: API Support
    email: support@screenshotapi.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.screenshotapi.dev
    description: Production server

components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-Key
      in: header
      description: API key for programmatic access
    apiKeyId:
      type: apiKey
      name: X-API-Key-ID
      in: header
      description: API key ID (used with JWT for enhanced security)
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Human-readable error message
        status:
          type: integer
          format: int32
          description: HTTP status code
        details:
          type: object
          description: Additional error details
          nullable: true
    
    # Screenshot related schemas
    ScreenshotRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          description: The URL to capture
          example: https://example.com
        width:
          type: integer
          minimum: 320
          maximum: 1920
          default: 1920
          description: Screenshot width in pixels
          example: 1280
        height:
          type: integer
          minimum: 240
          maximum: 1080
          default: 1080
          description: Screenshot height in pixels
          example: 800
        fullPage:
          type: boolean
          default: false
          description: Capture the full page length
        format:
          type: string
          enum: [PNG, JPEG, WEBP, PDF]
          default: PNG
          description: Output format
        quality:
          type: integer
          minimum: 1
          maximum: 100
          default: 90
          description: Image quality (for JPEG/WEBP)
        delay:
          type: integer
          minimum: 0
          maximum: 30000
          default: 0
          description: Delay in milliseconds before taking the screenshot
    
    ScreenshotResponse:
      type: object
      properties:
        jobId:
          type: string
          description: Unique job identifier
          example: "job_1749294000_abc12345"
        status:
          type: string
          enum: [QUEUED, PROCESSING, COMPLETED, FAILED]
          description: Current job status
        estimatedCompletion:
          type: string
          description: Estimated completion time
          example: "30-60s"
        queuePosition:
          type: integer
          description: Position in the processing queue
          example: 5

    ScreenshotStatusResponse:
      type: object
      properties:
        jobId:
          type: string
          description: Unique job identifier
          example: "job_1749294000_abc12345"
        status:
          type: string
          enum: [QUEUED, PROCESSING, COMPLETED, FAILED]
          description: Current job status
        resultUrl:
          type: string
          format: uri
          nullable: true
          description: URL to download the screenshot (available when completed)
          example: "https://api.screenshotapi.dev/files/screenshot_12345.png"
        createdAt:
          type: string
          format: date-time
          description: Job creation timestamp
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: Job completion timestamp
        processingTimeMs:
          type: integer
          nullable: true
          description: Processing time in milliseconds
        errorMessage:
          type: string
          nullable: true
          description: Error message if job failed
        request:
          $ref: '#/components/schemas/ScreenshotRequest'

    # User management schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        password:
          type: string
          minLength: 8
          description: User password (minimum 8 characters)
          example: "password123"
        name:
          type: string
          description: User's full name
          example: "John Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        password:
          type: string
          description: User password
          example: "password123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
        userId:
          type: string
          description: User identifier
        email:
          type: string
          format: email
          description: User email
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time

    UserProfile:
      type: object
      properties:
        userId:
          type: string
          description: User identifier
        email:
          type: string
          format: email
          description: User email
        name:
          type: string
          nullable: true
          description: User's full name
        status:
          type: string
          enum: [active, inactive, suspended]
          description: Account status
        planId:
          type: string
          description: Current subscription plan
          example: "plan_starter"
        creditsRemaining:
          type: integer
          description: Number of credits remaining
          example: 250
        createdAt:
          type: string
          format: date-time
          description: Account creation date
        lastActivity:
          type: string
          format: date-time
          nullable: true
          description: Last activity timestamp

    # API Key management schemas
    CreateApiKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Human-readable name for the API key
          example: "Production Key"

    ApiKeyResponse:
      type: object
      properties:
        id:
          type: string
          description: API key identifier
        name:
          type: string
          description: API key name
        keyValue:
          type: string
          description: The actual API key (only shown on creation)
          example: "sk_live_abc123..."
        isActive:
          type: boolean
          description: Whether the API key is active
        maskedKey:
          type: string
          description: Masked version of the API key
          example: "sk_live_***...abc"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        lastUsed:
          type: string
          format: date-time
          nullable: true
          description: Last usage timestamp

    # Retry response schema
    RetryScreenshotResponse:
      type: object
      properties:
        jobId:
          type: string
          description: The job identifier that was retried
          example: "job_1749294000_abc12345"
        message:
          type: string
          description: Success message
          example: "Job queued for manual retry"
        queuePosition:
          type: integer
          description: Position in the processing queue
          example: 2

    # Usage and analytics schemas
    UsageTimelineEntry:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Date for this entry
          example: "2025-01-06"
        screenshots:
          type: integer
          minimum: 0
          description: Number of screenshots taken
          example: 15
        creditsUsed:
          type: integer
          minimum: 0
          description: Credits consumed
          example: 30
        apiCalls:
          type: integer
          minimum: 0
          description: Number of API calls made
          example: 16
        successfulScreenshots:
          type: integer
          minimum: 0
          description: Number of successful screenshots
          example: 14
        failedScreenshots:
          type: integer
          minimum: 0
          description: Number of failed screenshots
          example: 1

    UsageTimelineSummary:
      type: object
      properties:
        totalScreenshots:
          type: integer
          minimum: 0
          description: Total screenshots in the period
          example: 150
        totalCreditsUsed:
          type: integer
          minimum: 0
          description: Total credits consumed
          example: 300
        totalApiCalls:
          type: integer
          minimum: 0
          description: Total API calls made
          example: 155
        averageDaily:
          type: number
          format: double
          minimum: 0
          description: Average daily usage
          example: 5.0
        successRate:
          type: number
          format: double
          minimum: 0
          maximum: 100
          description: Success rate percentage
          example: 93.33
        peakDay:
          type: string
          format: date
          nullable: true
          description: Date with highest usage
          example: "2025-01-15"
        peakDayScreenshots:
          type: integer
          minimum: 0
          description: Screenshots taken on peak day
          example: 25

    UsageTimelineResponse:
      type: object
      properties:
        timeline:
          type: array
          items:
            $ref: '#/components/schemas/UsageTimelineEntry'
          description: Timeline data points
        summary:
          $ref: '#/components/schemas/UsageTimelineSummary'
        period:
          type: string
          enum: [SEVEN_DAYS, THIRTY_DAYS, NINETY_DAYS, ONE_YEAR]
          description: Time period covered
        granularity:
          type: string
          enum: [DAILY, WEEKLY, MONTHLY]
          description: Data aggregation level

    UserUsage:
      type: object
      properties:
        userId:
          type: string
          description: User identifier
        totalScreenshots:
          type: integer
          minimum: 0
          description: Total screenshots taken
          example: 45
        creditsRemaining:
          type: integer
          minimum: 0
          description: Credits remaining this month
          example: 255
        creditsUsed:
          type: integer
          minimum: 0
          description: Credits used this month
          example: 45
        planLimit:
          type: integer
          description: Monthly credit limit
          example: 300
        resetDate:
          type: string
          format: date
          description: Next billing cycle reset date
          example: "2025-02-01"

paths:
  # Authentication endpoints
  /api/v1/auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  email:
                    type: string
                  status:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User profile endpoints
  /api/v1/user/profile:
    get:
      tags: [User Management]
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/usage:
    get:
      tags: [Usage & Analytics]
      summary: Get current usage statistics
      description: Retrieve current month's usage statistics for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUsage'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/usage/timeline:
    get:
      tags: [Usage & Analytics]
      summary: Get usage timeline
      description: |
        Retrieve detailed usage timeline with customizable period and granularity.
        Provides comprehensive analytics including success rates, peak usage days, and trends.
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
          description: Time period to analyze
          example: 30d
        - name: granularity
          in: query
          required: false
          schema:
            type: string
            enum: [DAILY, WEEKLY, MONTHLY]
            default: DAILY
          description: Data aggregation level
          example: DAILY
      responses:
        '200':
          description: Usage timeline data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageTimelineResponse'
              example:
                timeline:
                  - date: "2025-01-06"
                    screenshots: 15
                    creditsUsed: 30
                    apiCalls: 16
                    successfulScreenshots: 14
                    failedScreenshots: 1
                  - date: "2025-01-07"
                    screenshots: 8
                    creditsUsed: 16
                    apiCalls: 9
                    successfulScreenshots: 8
                    failedScreenshots: 0
                summary:
                  totalScreenshots: 150
                  totalCreditsUsed: 300
                  totalApiCalls: 155
                  averageDaily: 5.0
                  successRate: 93.33
                  peakDay: "2025-01-15"
                  peakDayScreenshots: 25
                period: "THIRTY_DAYS"
                granularity: "DAILY"
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "VALIDATION_ERROR"
                message: "Invalid period parameter. Valid values: 7d, 30d, 90d, 1y"
                status: 400
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # API Key management endpoints
  /api/v1/user/api-keys:
    get:
      tags: [API Key Management]
      summary: List API keys
      description: Retrieve all API keys for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKeyResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [API Key Management]
      summary: Create API key
      description: Create a new API key for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/api-keys/{keyId}:
    delete:
      tags: [API Key Management]
      summary: Delete API key
      description: Delete an API key (permanently disables it)
      security:
        - bearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
          description: API key identifier
          example: "key_abc123"
      responses:
        '200':
          description: API key deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Screenshot endpoints
  /api/v1/screenshots:
    post:
      tags: [Screenshots]
      summary: Take a screenshot
      description: |
        Submit a new screenshot request. Supports multiple authentication methods:
        1. API Key in X-API-Key header
        2. API Key ID in X-API-Key-ID header with JWT authentication
        3. API Key in Authorization header as Bearer token
      security:
        - apiKey: []
        - apiKeyId: []
          bearerAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenshotRequest'
            example:
              url: "https://example.com"
              width: 1280
              height: 800
              fullPage: false
              format: "PNG"
      responses:
        '202':
          description: Screenshot request accepted and queued for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenshotResponse'
              example:
                jobId: "job_1749294000_abc12345"
                status: "QUEUED"
                estimatedCompletion: "30-60s"
                queuePosition: 3
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '402':
          description: Insufficient credits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Screenshots]
      summary: List screenshots
      description: Retrieve a paginated list of screenshots for the authenticated user
      security:
        - apiKey: []
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of results per page
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [QUEUED, PROCESSING, COMPLETED, FAILED]
          description: Filter by screenshot status
      responses:
        '200':
          description: List of screenshots
          content:
            application/json:
              schema:
                type: object
                properties:
                  screenshots:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScreenshotStatusResponse'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 45
                      totalPages:
                        type: integer
                        example: 3
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/screenshots/{jobId}:
    get:
      tags: [Screenshots]
      summary: Get screenshot status
      description: Check the status and details of a specific screenshot job
      security:
        - apiKey: []
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: Screenshot job identifier
          example: "job_1749294000_abc12345"
      responses:
        '200':
          description: Screenshot job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenshotStatusResponse'
              example:
                jobId: "job_1749294000_abc12345"
                status: "COMPLETED"
                resultUrl: "https://api.screenshotapi.dev/files/screenshot_12345.png"
                createdAt: "2025-01-06T10:30:00Z"
                completedAt: "2025-01-06T10:30:45Z"
                processingTimeMs: 45000
                errorMessage: null
                request:
                  url: "https://example.com"
                  width: 1280
                  height: 800
                  fullPage: false
                  format: "PNG"
        '404':
          description: Job not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/screenshots/{jobId}/retry:
    post:
      tags: [Screenshots]
      summary: Retry a failed screenshot
      description: |
        Manually retry a failed or stuck screenshot job. This endpoint allows users to retry jobs that have failed 
        or are stuck in processing. The retry will:
        - Validate job ownership and status
        - Check available credits
        - Reset retry count for manual retries
        - Queue the job for processing with high priority
        
        Supported authentication methods:
        1. API Key in X-API-Key header
        2. API Key ID in X-API-Key-ID header with JWT authentication
        3. JWT authentication for web interface
      security:
        - apiKey: []
        - apiKeyId: []
          bearerAuth: []
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: Screenshot job identifier to retry
          example: "job_1749294000_abc12345"
      responses:
        '200':
          description: Screenshot job successfully queued for retry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetryScreenshotResponse'
              example:
                jobId: "job_1749294000_abc12345"
                message: "Job queued for manual retry"
                queuePosition: 2
        '400':
          description: Invalid request - Job cannot be retried
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "VALIDATION_ERROR"
                message: "Job must be in FAILED status or stuck (>30 min processing). Current status: COMPLETED"
                status: 400
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied - Job belongs to different user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "AUTHORIZATION_ERROR"
                message: "Not authorized to retry this job"
                status: 403
        '402':
          description: Insufficient credits for retry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "INSUFFICIENT_CREDITS"
                message: "Insufficient credits for retry"
                status: 402
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "RESOURCE_NOT_FOUND"
                message: "Job not found: job_1749294000_abc12345"
                status: 404
        '409':
          description: Job is currently being processed by another worker
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "CONCURRENT_MODIFICATION"
                message: "Job is currently being processed by another worker"
                status: 409

  /api/v1/screenshots/status/bulk:
    post:
      tags: [Screenshots]
      summary: Bulk screenshot status check
      description: |
        Check the status of multiple screenshot jobs in a single request.
        This endpoint is optimized for efficient polling of multiple jobs,
        reducing the number of API calls needed for status monitoring.
      security:
        - apiKey: []
        - apiKeyId: []
          bearerAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobIds
              properties:
                jobIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 50
                  description: List of job IDs to check (max 50)
                  example: ["job_1749294000_abc12345", "job_1749294001_def67890"]
      responses:
        '200':
          description: Bulk status response
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScreenshotStatusResponse'
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 2
                      completed:
                        type: integer
                        example: 1
                      failed:
                        type: integer
                        example: 0
                      processing:
                        type: integer
                        example: 1
                      queued:
                        type: integer
                        example: 0
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Billing endpoints
  /api/v1/billing/plans:
    get:
      tags: [Billing]
      summary: Get available subscription plans
      description: Retrieve all available subscription plans with pricing and features
      responses:
        '200':
          description: List of available plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "plan_starter"
                        name:
                          type: string
                          example: "Starter Plan"
                        price:
                          type: number
                          example: 9.99
                        currency:
                          type: string
                          example: "USD"
                        credits:
                          type: integer
                          example: 1000
                        features:
                          type: array
                          items:
                            type: string
                          example: ["1000 screenshots/month", "API access", "Email support"]

  /api/v1/billing/checkout:
    post:
      tags: [Billing]
      summary: Create Stripe checkout session
      description: Create a Stripe checkout session for plan subscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - planId
              properties:
                planId:
                  type: string
                  example: "plan_starter"
                successUrl:
                  type: string
                  format: uri
                  example: "https://yourapp.com/success"
                cancelUrl:
                  type: string
                  format: uri
                  example: "https://yourapp.com/cancel"
      responses:
        '200':
          description: Checkout session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    example: "cs_test_123"
                  url:
                    type: string
                    format: uri
                    example: "https://checkout.stripe.com/pay/cs_test_123"

  /api/v1/billing/subscription:
    get:
      tags: [Billing]
      summary: Get user subscription
      description: Get the current user's subscription details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User subscription details
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    type: string
                    example: "sub_123"
                  planId:
                    type: string
                    example: "plan_starter"
                  status:
                    type: string
                    example: "active"
                  currentPeriodEnd:
                    type: string
                    format: date-time
                    example: "2025-02-01T00:00:00Z"

  /api/v1/billing/portal:
    post:
      tags: [Billing]
      summary: Create billing portal session
      description: Create a Stripe billing portal session for subscription management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - returnUrl
              properties:
                returnUrl:
                  type: string
                  format: uri
                  example: "https://yourapp.com/billing"
      responses:
        '200':
          description: Billing portal session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                    example: "https://billing.stripe.com/session/12345"

  /api/v1/billing/webhook:
    post:
      tags: [Billing]
      summary: Stripe webhook handler
      description: Handle Stripe webhook events for subscription updates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Stripe webhook event payload
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook payload

  # Webhook endpoints
  /api/v1/webhooks:
    post:
      tags: [Webhooks]
      summary: Create webhook configuration
      description: Create a new webhook configuration for event notifications
      security:
        - apiKey: []
        - apiKeyId: []
          bearerAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
                - events
              properties:
                url:
                  type: string
                  format: uri
                  example: "https://yourapp.com/webhooks"
                events:
                  type: array
                  items:
                    type: string
                    enum: [SCREENSHOT_COMPLETED, SCREENSHOT_FAILED, CREDITS_LOW, CREDITS_EXHAUSTED]
                  example: ["SCREENSHOT_COMPLETED", "SCREENSHOT_FAILED"]
                isActive:
                  type: boolean
                  default: true
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "webhook_123"
                  url:
                    type: string
                    format: uri
                    example: "https://yourapp.com/webhooks"
                  events:
                    type: array
                    items:
                      type: string
                    example: ["SCREENSHOT_COMPLETED", "SCREENSHOT_FAILED"]
                  secret:
                    type: string
                    example: "whsec_abc123"
                  isActive:
                    type: boolean
                    example: true
    get:
      tags: [Webhooks]
      summary: List user webhooks
      description: Get all webhook configurations for the authenticated user
      security:
        - apiKey: []
        - bearerAuth: []
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhooks:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "webhook_123"
                        url:
                          type: string
                          format: uri
                          example: "https://yourapp.com/webhooks"
                        events:
                          type: array
                          items:
                            type: string
                          example: ["SCREENSHOT_COMPLETED"]
                        isActive:
                          type: boolean
                          example: true
                        createdAt:
                          type: string
                          format: date-time

  /api/v1/webhooks/{webhookId}:
    get:
      tags: [Webhooks]
      summary: Get webhook details
      description: Get details of a specific webhook configuration
      security:
        - apiKey: []
        - bearerAuth: []
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
          example: "webhook_123"
      responses:
        '200':
          description: Webhook details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "webhook_123"
                  url:
                    type: string
                    format: uri
                    example: "https://yourapp.com/webhooks"
                  events:
                    type: array
                    items:
                      type: string
                    example: ["SCREENSHOT_COMPLETED"]
                  isActive:
                    type: boolean
                    example: true
                  createdAt:
                    type: string
                    format: date-time
                  lastDelivery:
                    type: string
                    format: date-time
                    nullable: true

    put:
      tags: [Webhooks]
      summary: Update webhook
      description: Update an existing webhook configuration
      security:
        - apiKey: []
        - bearerAuth: []
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
          example: "webhook_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  example: "https://yourapp.com/webhooks"
                events:
                  type: array
                  items:
                    type: string
                  example: ["SCREENSHOT_COMPLETED", "SCREENSHOT_FAILED"]
                isActive:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Webhook updated successfully

    delete:
      tags: [Webhooks]
      summary: Delete webhook
      description: Delete a webhook configuration
      security:
        - apiKey: []
        - bearerAuth: []
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
          example: "webhook_123"
      responses:
        '200':
          description: Webhook deleted successfully
        '404':
          description: Webhook not found

  /api/v1/webhooks/{webhookId}/test:
    post:
      tags: [Webhooks]
      summary: Test webhook
      description: Send a test webhook event (rate limited to 1 per minute per user)
      security:
        - apiKey: []
        - bearerAuth: []
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
          example: "webhook_123"
      responses:
        '200':
          description: Test webhook sent successfully
        '429':
          description: Rate limit exceeded (1 test per minute per user)

  /api/v1/webhooks/events:
    get:
      tags: [Webhooks]
      summary: List available webhook events
      description: Get all available webhook events that can be subscribed to
      security:
        - apiKey: []
        - bearerAuth: []
      responses:
        '200':
          description: List of available events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "SCREENSHOT_COMPLETED"
                        description:
                          type: string
                          example: "Triggered when a screenshot is successfully completed"

  # System health and status endpoints
  /health:
    get:
      tags: [System]
      summary: Health check
      description: Check API health status
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

  /status:
    get:
      tags: [System]
      summary: Service status check
      description: Check service status with version information
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  version:
                    type: string
                    example: "1.0.0"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: string
                    example: "2h 35m 14s"

  /ready:
    get:
      tags: [System]
      summary: Readiness check
      description: Check readiness status for database, Redis, and workers
      responses:
        '200':
          description: Service ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
                  checks:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "healthy"
                      redis:
                        type: string
                        example: "healthy"
                      workers:
                        type: string
                        example: "healthy"
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "not_ready"
                  checks:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "failed"
                      redis:
                        type: string
                        example: "healthy"
                      workers:
                        type: string
                        example: "degraded"

  /metrics:
    get:
      tags: [System]
      summary: System metrics
      description: Get system metrics including workers, memory, and uptime
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  workers:
                    type: object
                    properties:
                      active:
                        type: integer
                        example: 3
                      idle:
                        type: integer
                        example: 2
                      total:
                        type: integer
                        example: 5
                  memory:
                    type: object
                    properties:
                      used:
                        type: string
                        example: "512MB"
                      available:
                        type: string
                        example: "1GB"
                      percentage:
                        type: number
                        example: 51.2
                  uptime:
                    type: string
                    example: "2h 35m 14s"
                  requests:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 1247
                      success:
                        type: integer
                        example: 1198
                      error:
                        type: integer
                        example: 49

  /test-screenshot:
    get:
      tags: [System]
      summary: Test screenshot generation
      description: Test endpoint for screenshot generation without authentication
      responses:
        '200':
          description: Test screenshot initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Test screenshot initiated"
                  jobId:
                    type: string
                    example: "test_job_123"

  # Admin endpoints
  /api/v1/admin/users:
    get:
      tags: [Admin]
      summary: List users
      description: Get paginated list of users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          example: 20
        - name: search
          in: query
          schema:
            type: string
          example: "john@example.com"
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
          example: "active"
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 156
                      totalPages:
                        type: integer
                        example: 8
        '401':
          description: Authentication required
        '403':
          description: Admin access required

  /api/v1/admin/users/{userId}:
    get:
      tags: [Admin]
      summary: Get user details
      description: Get detailed information about a specific user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "user_123"
        - name: includeActivity
          in: query
          schema:
            type: boolean
            default: false
          example: true
        - name: includeApiKeys
          in: query
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserProfile'
                  - type: object
                    properties:
                      activity:
                        type: object
                        properties:
                          lastLogin:
                            type: string
                            format: date-time
                          screenshotCount:
                            type: integer
                            example: 45
                          creditsUsed:
                            type: integer
                            example: 90
                      apiKeys:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "key_123"
                            name:
                              type: string
                              example: "Production Key"
                            maskedKey:
                              type: string
                              example: "sk_live_***...abc"
                            isActive:
                              type: boolean
                              example: true
                            lastUsed:
                              type: string
                              format: date-time
                              nullable: true
        '404':
          description: User not found
        '401':
          description: Authentication required
        '403':
          description: Admin access required

  /api/v1/admin/stats:
    get:
      tags: [Admin]
      summary: Get system statistics
      description: Get comprehensive system statistics (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [1d, 7d, 30d, 90d, 365d]
            default: 30d
          example: "30d"
        - name: breakdown
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
          example: "daily"
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 156
                      active:
                        type: integer
                        example: 89
                      new:
                        type: integer
                        example: 12
                  screenshots:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 4567
                      successful:
                        type: integer
                        example: 4321
                      failed:
                        type: integer
                        example: 246
                      successRate:
                        type: number
                        example: 94.6
                  revenue:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1234.56
                      currency:
                        type: string
                        example: "USD"
                      subscriptions:
                        type: integer
                        example: 23
                  performance:
                    type: object
                    properties:
                      avgProcessingTime:
                        type: number
                        example: 2.3
                      peakConcurrency:
                        type: integer
                        example: 15
        '401':
          description: Authentication required
        '403':
          description: Admin access required

  /api/v1/admin/subscriptions:
    get:
      tags: [Admin]
      summary: List all subscriptions
      description: Get paginated list of all subscriptions (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          example: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, canceled, past_due]
          example: "active"
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "sub_123"
                        userId:
                          type: string
                          example: "user_456"
                        planId:
                          type: string
                          example: "plan_starter"
                        status:
                          type: string
                          example: "active"
                        currentPeriodStart:
                          type: string
                          format: date-time
                        currentPeriodEnd:
                          type: string
                          format: date-time
                        createdAt:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 45
                      totalPages:
                        type: integer
                        example: 3
        '401':
          description: Authentication required
        '403':
          description: Admin access required

  /api/v1/admin/users/{userId}/synchronize-plan:
    post:
      tags: [Admin]
      summary: Synchronize user plan
      description: Synchronize user plan with Stripe subscription (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "user_123"
      responses:
        '200':
          description: Plan synchronized successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User plan synchronized successfully"
                  planId:
                    type: string
                    example: "plan_starter"
                  creditsRemaining:
                    type: integer
                    example: 750
        '404':
          description: User not found
        '401':
          description: Authentication required
        '403':
          description: Admin access required

tags:
  - name: Authentication
    description: User authentication and session management
  - name: User Management
    description: User profile and account management
  - name: API Key Management
    description: API key creation and management
  - name: Screenshots
    description: Screenshot generation and management
  - name: Usage & Analytics
    description: Usage statistics and analytics
  - name: Billing
    description: Subscription plans and billing management
  - name: Webhooks
    description: Webhook configuration and event notifications
  - name: Admin
    description: Administrative operations and system management
  - name: System
    description: System health and status endpoints